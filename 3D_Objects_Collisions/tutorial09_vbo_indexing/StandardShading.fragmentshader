/*
Last Date Modified: 1/9/2024

Description:

This file is to render the color or apply the setting of the objects.
Also, there is a if-else statement to determine whether gl_FragColor.rgb is for
xy-plane or for the object. 

LightPower2 is for the goal of internal random light.

*/

#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition_worldspace2;

// Parameters for light control and color for the xy-plane.
uniform int JustGreen;
//uniform int LightComponent;
uniform float LightPower2;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 200.0f;
	//LightPower2 = 100.0f;

	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.2,0.2,0.2) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	float distance2 = length( LightPosition_worldspace2 - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	

	// if-else statement to determine whether gl_FragColor.rgb is for xy-plane or for the object. 
	if (JustGreen == 0){
	    //if (LightComponent == 0)
		{
			gl_FragColor.rgb = 
			// Ambient : simulates indirect lighting
			MaterialAmbientColor +
			// Diffuse : "color" of the object
			MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			MaterialDiffuseColor * LightColor * LightPower2 * cosTheta / (distance2*distance2) +
			// Specular : reflective highlight, like a mirror
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance) +
			MaterialSpecularColor * LightColor * LightPower2 * pow(cosAlpha,5) / (distance2*distance2);
		}
	    //else
		//{
	       // gl_FragColor.rgb = MaterialAmbientColor;	
	    //}		
	}
	else
	{
		// color of the xy-plane.
		gl_FragColor.rgb = vec3(0,1,0);
	}

}